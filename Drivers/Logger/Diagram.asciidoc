[mermaid]
----
classDiagram
    class Logger {
        - UART_HandleTypeDef* _huart
        - GPIO_TypeDef* GPIOx_openlog_reset
        - uint16_t GPIO_pin_openlog_reset
        - uint_fast32_t DataWritten
        + Logger(UART_HandleTypeDef*, GPIO_TypeDef*, uint16_t)
        + void init()
        + void logData(const uint8_t* data, int length)
        + void logData(uint8_t* data, int length)
        + void logData(ILoggable &obj)
        + void logData(std::string &str)
        - uint8_t enter_cmd_mode() const
        - void updateRecords(int len)
        - static int extract_last_log(const char* buffer)
        - void Reset_openlog() const
    }

    class ILoggable {
        <<interface>>
        + std::string toString()
    }

    Logger --> ILoggable : uses

    note for Logger::init
      Calls Reset_openlog()
      // Optionally listens for init response
    end note

    note for Logger::logData
      Overloaded for:
        - raw data buffer
        - std::string
        - ILoggable object
    end note

    note for Logger::updateRecords
      Tracks total bytes written
      If limit exceeded:
        - enters command mode
        - runs "ls"
        - parses log filenames
        - appends new log file
    end note
----