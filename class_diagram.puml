@startuml
 
Interface ILoggable {
    + void updateTimestamp() 
    + bool isValid() const
    + std::string getSampletimeString() const
    {abstract} + std::string toString()

}

class accelerometerData implements ILoggable {
    + std::string toString() override
    + int16_t Xaccel
    + int16_t Yaccel
    + int16_t Zaccel
}

Interface IProcess {
    # ILoggable *Data
    {abstract} + void init();
    {abstract} + void update();
    {abstract} + void register_data(ILoggable *data);
}


class ADXL345 implements IProcess {
    + init() override;
    + update() override;
    + register_data(ILoggable *data) override;
    + readRegister(uint8_t reg);
    + writeRegister(uint8_t reg,uint8_t value) const;
    + getAxis() const;
    + processIRQ() const;
}

class Spectronik implements IProcess {
    + sendStart();
    + sendEnd();
    + getProtiumData() const;
    + printProtiumData(const ProtiumData& data) const;
    + uartRxEventCallback(UART_HandleTypeDef *huart, uint16_t Size);
    + gpioExtiCallback();
    - parseProtiumData(const char *long_string);
}

class Collector {
    + RegisterProcess(IProcess *p)
    + RegisterData(ILoggable *l)
    + update();
    - IProcess *process[DATA_SOURCE_COUNT]{};
    - ILoggable *loggable[DATA_SOURCE_COUNT]{};
}

class TimeSource {
    + {static} systemTime_t GetTime()
    + volatile {static} systemTime_t time;
    + {static} void update_msTick()
    + {static} void update_fromGNSS(const int_fast8_t , const int_fast8_t , const int_fast8_t , const int_fast16_t ) 
}

enum Status {
    ADXL345_PWR_ON = 0,
    ADXL345_CONFIGURED,
    ADXL345_OK,
    COUNT,
    INVALID

}

enum Error {
    ADXL345_NO_DATA_OBJ,
    COUNT,
    INVALID
}

enum Peripheral {
    ADXL345 = 0,
    LOGGER,
    CAN,
    SPECTRONIK,
    PERIPHERAL_COUNT_,
}

class StatusManager<int N>{
    + void add_Pin(Peripheral, GPIO)
    + void add_SparePin(const GPIO)
    + void set_status(const Status)
    + void set_bin_status(const Error)
    + Status get_status()
    + Error get_bin_status()
    - Status status_
    - Error bin_status
    - std::array<GPIO,N> status_gpios
    - GPIO Spare_gpio
}   

StatusManager --> Peripheral
StatusManager --> Error
StatusManager --> Status

Collector <-- IProcess
Collector <-- ILoggable
TimeSource -> ILoggable

@enduml
