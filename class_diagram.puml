@startuml
 
Interface ILoggable {
    + updateTimestamp() 
    + isValid() const
    + getSampletimeString() const
    {abstract} + toString()

}
Interface IProcess {
    # ILoggable *Data
    {abstract} + init();
    {abstract} + update();
    {abstract} + register_data(ILoggable *data);
}


class ADXL345 implements IProcess {
    + init() override;
    + update() override;
    + register_data(ILoggable *data) override;
    + readRegister(uint8_t reg);
    + writeRegister(uint8_t reg,uint8_t value) const;
    + getAxis() const;
    + processIRQ() const;
}

class Spectronik implements IProcess {
    + sendStart();
    + sendEnd();
    + getProtiumData() const;
    + printProtiumData(const ProtiumData& data) const;
    + uartRxEventCallback(UART_HandleTypeDef *huart, uint16_t Size);
    + gpioExtiCallback();
    - parseProtiumData(const char *long_string);
}

class Collector {
    + RegisterProcess(IProcess *p)
    + RegisterData(ILoggable *l)
    + update();
    - IProcess *process[DATA_SOURCE_COUNT]{};
    - ILoggable *loggable[DATA_SOURCE_COUNT]{};
}
class TimeSource {
    + {static} systemTime_t GetTime()
    + volatile {static} systemTime_t time;
    + {static} void update_msTick()
    + {static} void update_fromGNSS(const int_fast8_t hour, const int_fast8_t minute, const int_fast8_t second, const int_fast16_t ms) 
}


@enduml
