### Spectronik Emulator Detailed Documentation

### Table of Contents (Spectronik Emulator Details)

*   [1. Introduction](#spectronik-intro)
*   [2. Hardware](#spectronik-hardware)
    *   [2.1. Configuration Overview](#spectronik-hw-config)
    *   [2.2. Design Document](#spectronik-hw-design)
*   [3. Software](#spectronik-software)
    *   [3.1. Overview](#spectronik-sw-overview)
    *   [3.2. Configuration Constants for Dynamic Behavior](#spectronik-sw-config-constants)
    *   [3.3. UART Command Interface](#spectronik-sw-uart)
    *   [3.4. Data String Format Example](#spectronik-sw-string-format)
    *   [3.5. String Construction](#spectronik-sw-string-construction)

---

### 1. Introduction <a name="spectronik-intro"></a>

This document describes a C code snippet for the MKL25Z4 microcontroller. It implements UART communication to simulate and transmit dynamic system data based on received commands and physical button input. This allows for testing and interaction with a system expecting data from a spectronik device.

---

### 2. Hardware <a name="spectronik-hardware"></a>

#### 2.1. Configuration Overview <a name="spectronik-hw-config"></a>

The emulator is designed to run on specific hardware with the following configuration:

*   **Target MCU:** MKL25Z4
*   **UART Peripheral:** UART2
*   **UART Pins:**
    *   `PTE23` (MUX 4) for UART2_TX
    *   `PTE22` (MUX 4) for UART2_RX
*   **Baud Rate:** 57600 bps
*   **Data Format:** 8N1 (8 data bits, No parity, 1 stop bit)
*   **Button Input:** `PORTC` Pin 3 (Used to stop transmission)
*   **LED Output:** `PTE31` (Used for a simple blinking pattern, indicating activity or status)

#### 2.2. Design Document <a name="spectronik-hw-design"></a>

For detailed schematics, PCB layout, and component selection, please refer to the hardware design document.

*   **[Placeholder for Link to Hardware Design PDF/Document]**
    *   *(e.g., [spectronik Emulator Hardware Design_v1.0.pdf](./path/to/spectronik_Emulator_Hardware_Design_v1.0.pdf))*

---

### 3. Software <a name="spectronik-software"></a>

#### 3.1. Overview <a name="spectronik-sw-overview"></a>

The software running on the MKL25Z4 microcontroller is responsible for generating simulated data, handling UART communication, and responding to user commands.

#### 3.2. Configuration Constants for Dynamic Behavior <a name="spectronik-sw-config-constants"></a>

The behavior of the simulated dynamic variables (`FAN`, `H2P1`, `H2P2`, `Tank_P`, `UCB_V`) is controlled by preprocessor `#define` constants within the C code. Modifying these values directly alters the simulation characteristics before compilation.

*   `TIME_STEP`: Determines how much the internal `time_counter` increments each update cycle. This affects the speed of all time-dependent functions (Ramp, Sin, Cos).
*   `H2P1_INCREMENT`: Controls the step size for the linear increase (Ramp) of the `H2P1` value per time step.
*   `H2P2_AMPLITUDE`, `H2P2_OFFSET`: Define the amplitude and vertical shift (DC offset) of the sine wave function applied to `H2P2`.
*   `TANK_P_AMPLITUDE`, `TANK_P_OFFSET`: Define the amplitude and vertical shift (DC offset) of the cosine wave function applied to `Tank_P`.
*   `UCB_V_AMPLITUDE`, `UCB_V_OFFSET`: Define the amplitude and vertical shift (DC offset) of the combined sine/cosine function applied to `UCB_V`.

Changing these constants before compiling the code will change the rate, range, and characteristics of the data simulation.

#### 3.3. UART Command Interface <a name="spectronik-sw-uart"></a>

The system responds to specific commands received via UART2. These commands control the data transmission mode. Commands must be terminated with a carriage return (`\r`).

*   **`values\r`**:
    *   Upon receiving this exact string, the system performs *one* update of the dynamic values.
    *   It then transmits the formatted data string (`long_string`) *one time*.
*   **`start\r`**:
    *   Upon receiving this exact string, the system enters a continuous transmission mode.
    *   It periodically updates the dynamic values and transmits the formatted data string (`long_string`).
*   **`end\r`**:
    *   Upon receiving this exact string, or if the physical button connected to `PORTC` pin 3 is pressed, the system:
        *   Stops the continuous transmission mode (if active).
        *   Transmits a fixed "System Off" message (`end_string`) *one time*.

#### 3.4. Data String Format Example <a name="spectronik-sw-string-format"></a>

The primary data string (`long_string`) transmitted by the emulator has the following format. Note that `[2J` is an ANSI escape sequence that typically clears the terminal screen.
```
[2J|FC_V : 31.01 V | FC_A : 7.63 A | FC_W : 236.5 W | Energy: 88 Wh| FCT1: 47.85 C | FAN : %d %% | H2P1 : %.2f B | H2P2 : %.2f B | Tank-P: %.2f B | Tank-T: 0.00 C | V_Set: 36.00 V | I_Set: 11.00 A | UCB_V: %.2f V | Stasis_selector: 0 | STASIS_V1 : 35.20 B | STASIS_V2 : 35.80 B | Number_of_cell :50 | | | | ! Fan PWM auto \r\n
```

#### 3.5. String Construction <a name="spectronik-sw-string-construction"></a>

The C standard library function `snprintf` is used to build the `long_string` by inserting dynamic values into the template shown above. The format specifiers in the template are replaced by the current values of specific program variables as follows:

*   **`%d`** (for `FAN`):
    *   Replaced by the integer value of `FAN * 100`.
    *   Since `FAN` is typically 0 or 1 in the simulation, this will insert `0` or `100` into the "FAN" field, representing percentage.
*   **`%.2f`** (first instance, for `H2P1`):
    *   Replaced by the value of the `float` variable `H2P1`.
    *   Formatted to two decimal places.
*   **`%.2f`** (second instance, for `H2P2`):
    *   Replaced by the value of the `float` variable `H2P2`.
    *   Formatted to two decimal places.
*   **`%.2f`** (third instance, for `Tank_P`):
    *   Replaced by the value of the `float` variable `Tank_P`.
    *   Formatted to two decimal places.
*   **`%.2f`** (fourth instance, for `UCB_V`):
    *   Replaced by the value of the `float` variable `UCB_V`.
    *   Formatted to two decimal places.

    